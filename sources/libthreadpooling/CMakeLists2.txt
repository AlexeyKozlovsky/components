cmake_minimum_required(VERSION 3.14)
include(env.cmake)

project(${LIB_NAME}
        VERSION ${LIB_VERSION}
        DESCRIPTION ${LIB_DESCRIPTION}
        LANGUAGES CXX)

add_library(${LIB_NAME}) # initialized below
add_library(${LIB_NAME}::${LIB_NAME} ALIAS ${LIB_NAME})

string(COMPARE EQUAL "${CMAKE_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}"
        is_top_level)


include(cmake/utils.cmake)
include(GNUInstallDirs)

# TODO: ДОПИСАТЬ ФОРМИРОВАНИЕ БИБЛИОТЕКИ

# MYLIB_SHARED_LIBS determines static/shared build when defined
option(MYLIB_BUILD_TESTS "Build ${LIB_NAME} tests" OFF)
option(MYLIB_BUILD_EXAMPLES "Build ${LIB_NAME} examples" OFF)
option(MYLIB_INSTALL "Generate target for installing mylib" ${is_top_level})
set_if_undefined(MYLIB_INSTALL_CMAKEDIR
        "${CMAKE_INSTALL_LIBDIR}/cmake/${LIB_NAME}-${PROJECT_VERSION}" CACHE STRING
        "Install path for ${LIB_NAME} package-related CMake files")

if(DEFINED MYLIB_SHARED_LIBS)
    set(BUILD_SHARED_LIBS ${MYLIB_SHARED_LIBS})
endif()



set_if_undefined(CMAKE_CXX_VISIBILITY_PRESET hidden)
set_if_undefined(CMAKE_VISIBILITY_INLINES_HIDDEN ON)



include(GenerateExportHeader)
set(export_file_name "export_shared.h")

if(NOT BUILD_SHARED_LIBS)
    set(export_file_name "export_static.h")
endif()

generate_export_header(${LIB_NAME} EXPORT_FILE_NAME include/${LIB_NAME}/${export_file_name})



set(public_headers
        include/${LIB_NAME}/*.h
        include/${LIB_NAME}/impls/*.h)
set(sources
        ${public_headers}
        src/${LIB_NAME}/*.cpp
        src/${LIB_NAME}/impls/*.cpp
        )

source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES ${sources})

list(APPEND public_headers
        "${CMAKE_CURRENT_BINARY_DIR}/include/${LIB_NAME}/${export_file_name}")
list(APPEND sources
        "${CMAKE_CURRENT_BINARY_DIR}/include/${LIB_NAME}/${export_file_name}")




include(CMakePackageConfigHelpers)

target_sources(${LIB_NAME} PRIVATE ${sources})
target_compile_definitions(${LIB_NAME}
        PUBLIC
        "$<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:MYLIB_STATIC_DEFINE")

target_include_directories(${LIB_NAME}
        PUBLIC
        "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
        "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>"
        "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"
        PRIVATE
        "${CMAKE_CURRENT_SOURCE_DIR}/src")

set_target_properties(${LIB_NAME} PROPERTIES
        PUBLIC_HEADER "${public_headers}"
        SOVERSION ${PROJECT_VERSION_MAJOR}
        VERSION ${PROJECT_VERSION})






configure_package_config_file(cmake/${LIB_NAME}-config.cmake.in ${LIB_NAME}-config.cmake
        INSTALL_DESTINATION "${MYLIB_INSTALL_CMAKEDIR}")

write_basic_package_version_file(${LIB_NAME}-config-version.cmake
        COMPATIBILITY SameMajorVersion)

install(TARGETS ${LIB_NAME} EXPORT ${LIB_NAME}_export
        RUNTIME COMPONENT ${LIB_NAME}
        LIBRARY COMPONENT ${LIB_NAME} NAMELINK_COMPONENT ${LIB_NAME}-dev
        ARCHIVE COMPONENT ${LIB_NAME}-dev
        PUBLIC_HEADER COMPONENT ${LIB_NAME}-dev
        DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${LIB_NAME}")

set(targets_file "${LIB_NAME}-shared-targets.cmake")

if(NOT BUILD_SHARED_LIBS)
    set(targets_file "${LIB_NAME}-static-targets.cmake")
endif()

install(EXPORT ${LIB_NAME}_export
        COMPONENT ${LIB_NAME}-dev
        FILE "${targets_file}"
        DESTINATION "${MYLIB_INSTALL_CMAKEDIR}"
        NAMESPACE ${LIB_NAME}::)

install(FILES
        "${CMAKE_CURRENT_BINARY_DIR}/${LIB_NAME}-config.cmake"
        "${CMAKE_CURRENT_BINARY_DIR}/${LIB_NAME}-config-version.cmake"
        COMPONENT ${LIB_NAME}-dev
        DESTINATION "${MYLIB_INSTALL_CMAKEDIR}")






if(MSVC)
    set(pdb_file "")
    set(pdb_file_destination "")

    if(BUILD_SHARED_LIBS)
        set(pdb_file "$<TARGET_PDB_FILE:mylib>")
        set(pdb_file_destination "${CMAKE_INSTALL_BINDIR}")
    else()
        # TARGET_PDB_FILE does not work for pdb file generated by compiler
        # during static library build, need to determine it another way
        set(pdb_file "$<TARGET_FILE_DIR:${LIB_NAME}>/$<TARGET_FILE_PREFIX:${LIB_NAME}>$<TARGET_FILE_BASE_NAME:${LIB_NAME}>.pdb")
        set(pdb_file_destination "${CMAKE_INSTALL_LIBDIR}")
    endif()

    install(FILES "${pdb_file}"
            COMPONENT ${LIB_NAME}-dev
            CONFIGURATIONS Debug RelWithDebInfo
            DESTINATION "${pdb_file_destination}"
            OPTIONAL)
endif()